set nocompatible              " required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'
Plugin 'tmhedberg/SimpylFold'
Plugin 'vim-scripts/indentpython.vim'
Plugin 'vim-syntastic/syntastic'
Plugin 'nvie/vim-flake8'
Plugin 'jnurmine/Zenburn'
Plugin 'altercation/vim-colors-solarized'
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'kien/ctrlp.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
Plugin 'joshdick/onedark.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'kaicataldo/material.vim'
Plugin 'tyrannicaltoucan/vim-quantum'
Plugin 'Jimeno0/vim-chito'
Plugin 'haishanh/night-owl.vim'
Plugin 'dart-lang/dart-vim-plugin'
Plugin 'thosakwe/vim-flutter'
Plugin 'dense-analysis/ale'
Plugin 'vim-scripts/taglist.vim'
Plugin 'pangloss/vim-javascript'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'leafgarland/typescript-vim'
Plugin 'elzr/vim-json'
Plugin 'derekwyatt/vim-scala'
Plugin 'ekalinin/dockerfile.vim'
Plugin 'stanangeloff/php.vim'
Plugin 'rayburgemeestre/phpfolding.vim'
Plugin '2072/PHP-Indenting-for-VIm'
Plugin 'chrisbra/csv.vim'
Plugin 'hynek/vim-python-pep8-indent'
Plugin 'vim-scripts/c.vim'
Plugin 'wting/rust.vim'
Plugin 'jparise/vim-graphql'
Plugin 'chr4/nginx.vim'
Plugin 'sudar/vim-arduino-syntax'
Plugin 'dsawardekar/wordpress.vim'
Plugin 'mattn/emmet-vim'
Plugin 'tomasr/molokai'
Plugin 'janko-m/vim-test'
Plugin 'junegunn/gv.vim'
Plugin 'prettier/vim-prettier'
Plugin 'jpalardy/vim-slime'
Plugin 'hanschen/vim-ipython-cell'
Plugin 'luochen1990/rainbow'
Plugin 'sickill/vim-monokai'
Plugin 'airblade/vim-gitgutter'
Plugin 'mileszs/ack.vim'
Plugin 'fatih/vim-go'
"
" add all your plugins here (note older versions of Vundle
" used Bundle instead of Plugin)

" ...

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required


" setting the split screen
set splitbelow
set splitright

"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Enable folding
set foldmethod=indent
set foldlevel=99

" Enable folding with the spacebar
nnoremap <space> za

" Python indentation
au BufNewFile,BufRead *.py
    \ set tabstop=2
    \ softtabstop=2
    \  shiftwidth=2
    \ textwidth=79
    \ expandtab
    \ autoindent
    \ fileformat=unix

" Indentation for other file formats
au BufNewFile,BufRead *.php
    \ set filetype=php.html.javascript.css
    \ tabstop=2
    \  softtabstop=2
    \  shiftwidth=2
    \  textwidth=79
    \  expandtab
    \  autoindent
    \  fileformat=unix

"au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" Specify that you're using UTF8
set encoding=utf-8

"python with virtualenv support
"py << EOF
"import os
"import sys
"if 'VIRTUAL_ENV' in os.environ:
"  project_base_dir = os.environ['VIRTUAL_ENV']
"  activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
"  execfile(activate_this, dict(__file__=activate_this))
"EOF

" Enable syntax highlighting
let python_highlight_all=1
syntax on

set t_Co=256
highlight Normal ctermbg=NONE
highlight nonText ctermbg=NONE

if(has('termguicolors'))
    set termguicolors
endif

"" enable theme
syntax enable
" colorscheme night-owl
colorscheme monokai

"""
if has("gui_running")
    set background=dark
    colorscheme material
else
   colorscheme onedark
endif

" To enable color switching
call togglebg#map("<F5>")

" Ignore .pyc files
let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree

" Enable line numbering
set nu

" set vim clipboard to the system keyboard
set clipboard=unnamed

"increasing the line space
set linespace=3
Plugin 'wakatime/vim-wakatime'

" nerd tree autoshow
au StdinReadPre * let s:std_in=1
au VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif

" show hidden files
let NERDTreeShowHidden=1

set backspace=indent,eol,start  " more powerful backspacing

" monokai
let g:molokai_original = 1
let g:rehash256 = 1

" these "Ctrl mappings" work well when Caps Lock is mapped to Ctrl
nmap <silent> t<C-n> :TestNearest<CR>
nmap <silent> t<C-f> :TestFile<CR>
nmap <silent> t<C-s> :TestSuite<CR>
nmap <silent> t<C-l> :TestLast<CR>
nmap <silent> t<C-g> :TestVisit<CR>

" prettier bindings
packloadall

" REPL - (Read Eval Print Loop)
let g:slime_target = "tmux"
let g:slime_paste_file = "$HOME/.slime_paste"
let g:slime_default_config = {"socket_name": "default", "target_pane": "{last}"}

" fix paste issues in ipython
let g:slime_python_ipython = 1

" always send text to the top-right pane in the current tmux tab without asking
let g:slime_default_config = {
            \ 'socket_name': get(split($TMUX, ','), 0),
            \ 'target_pane': '{top-right}' }
let g:slime_dont_ask_default = 1

" Rainbow config
let g:rainbow_active = 1 "set to 0 if you want to enable it later via :RainbowToggle

" Git gutter
let g:gitgutter_terminal_reports_focus=0

filetype plugin indent on
" On pressing tab, insert 2 spaces
set expandtab
" show existing tab with 2 spaces width
set tabstop=2
set softtabstop=2
" when indenting with '>', use 2 spaces width
set shiftwidth=2
